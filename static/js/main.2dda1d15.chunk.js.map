{"version":3,"sources":["AirQuality.js","Pollution.js","App.js","reportWebVitals.js","index.js"],"names":["AirQuality","useState","airQuality","setAirQuality","locationName","setLocationName","error","setError","loading","setLoading","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","fetchAirQualityData","fetchLocationName","a","apiUrl","axios","get","response","data","list","length","airData","components","name","pm10","pm2_5","Pollution","id","className","this","props","sidoName","stationName","coGrade","coValue","no2Grade","no2Value","pm10Grade","pm10Value","pm25Grade","pm25Value","so2Grade","so2Value","o3Grade","o3Value","Component","App","getData","serviceKey","state","city","alert","method","url","dataType","then","body","items","setState","pollutionDataList","handleChange","e","target","value","result","map","type","placeholder","onChange","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2dda1d15.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AirQuality = () => {\r\n    const [airQuality, setAirQuality] = useState(null);\r\n    const [locationName, setLocationName] = useState(\"\"); // 지역 이름 상태 추가\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // 위치 정보 가져오기\r\n        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n\r\n        function successCallback(position) {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            console.log(\"위치 정보:\", { latitude, longitude }); // 위치 정보 콘솔에 출력\r\n            fetchAirQualityData(latitude, longitude);\r\n            fetchLocationName(latitude, longitude); // 지역 이름 가져오기\r\n        }\r\n\r\n        function errorCallback() {\r\n            setError(\"위치 정보를 가져오는 데 실패했습니다.\");\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const fetchAirQualityData = async (latitude, longitude) => {\r\n        const apiKey = '3598c54da4d7cf34e04ec92640a797a9'; // 대기질 API 키\r\n        const apiUrl = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${latitude}&lon=${longitude}&appid=${apiKey}`;\r\n\r\n        try {\r\n            const response = await axios.get(apiUrl);\r\n            console.log(\"대기질 API 응답:\", response.data); // 응답 로그 출력\r\n            if (response.data.list && response.data.list.length > 0) {\r\n                const airData = response.data.list[0];\r\n                setAirQuality(airData.components); // components에서 미세먼지 정보 가져오기\r\n            } else {\r\n                setError(\"미세먼지 데이터를 가져오는 데 실패했습니다.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"대기질 API 요청 오류:\", err);\r\n            setError(\"미세먼지 데이터를 가져오는 데 실패했습니다.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchLocationName = async (latitude, longitude) => {\r\n        const apiKey = '3598c54da4d7cf34e04ec92640a797a9'; // 지오코딩 API 키\r\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=kr`; // 한국어 요청\r\n\r\n        try {\r\n            const response = await axios.get(apiUrl);\r\n            if (response.data) {\r\n                let name = response.data.name; // 지역 이름 설정\r\n                // 지역 이름 매핑\r\n                const locationMapping = {\r\n                    \"Seoul\": \"서울특별시\",\r\n                    \"Busan\": \"부산광역시\",\r\n                    \"Incheon\": \"인천광역시\",\r\n                    \"Daegu\": \"대구광역시\",\r\n                    \"Daejeon\": \"대전광역시\",\r\n                    \"Gwangju\": \"광주광역시\",\r\n                    \"Ulsan\": \"울산광역시\",\r\n                    \"Sejong\": \"세종특별자치시\",\r\n                    \"Gyeonggi-do\": \"경기도\",\r\n                    \"Gangwon-do\": \"강원도\",\r\n                    \"Chungcheongbuk-do\": \"충청북도\",\r\n                    \"Chungcheongnam-do\": \"충청남도\",\r\n                    \"Jeollabuk-do\": \"전라북도\",\r\n                    \"Jeollanam-do\": \"전라남도\",\r\n                    \"Gyeongsangbuk-do\": \"경상북도\",\r\n                    \"Gyeongsangnam-do\": \"경상남도\",\r\n                    \"Jeju-do\": \"제주도\",\r\n                    // 추가적인 세부 지역 매핑\r\n                    \"Gangseo-gu\": \"강서구\",\r\n                    \"Gangdong-gu\": \"강동구\",\r\n                    \"Songpa-gu\": \"송파구\",\r\n                    \"Mapo-gu\": \"마포구\",\r\n                    \"Seocho-gu\": \"서초구\",\r\n                    \"Yongsan-gu\": \"용산구\",\r\n                    \"Jongno-gu\": \"종로구\",\r\n                    \"Gwangjin-gu\": \"광진구\",\r\n                    \"Nowon-gu\": \"노원구\",\r\n                    \"Dobong-gu\": \"도봉구\",\r\n                    \"Gangbuk-gu\": \"강북구\",\r\n                    \"Eunpyeong-gu\": \"은평구\",\r\n                    \"Seongbuk-gu\": \"성북구\",\r\n                    \"Jungnang-gu\": \"중랑구\",\r\n                    // 부산 세부구역\r\n                    \"Haeundae-gu\": \"해운대구\",\r\n                    \"Suyeong-gu\": \"수영구\",\r\n                    \"Nam-gu\": \"남구\",\r\n                    \"Dong-gu\": \"동구\",\r\n                    \"Busanjin-gu\": \"부산진구\",\r\n                    \"Yeonje-gu\": \"연제구\",\r\n                };\r\n                setLocationName(locationMapping[name] || name); // 매핑된 이름 또는 기본 이름 설정\r\n            }\r\n        } catch (err) {\r\n            console.error(\"지역 이름 요청 오류:\", err);\r\n        }\r\n    };\r\n\r\n    if (loading) return <div>로딩 중...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>미세먼지 정보</h1>\r\n            {locationName && <h2>측정 지역: {locationName}</h2>}\r\n            {airQuality ? (\r\n                <div>\r\n                    <p>미세먼지 (PM10): {airQuality.pm10} μg/m³</p>\r\n                    <p>초미세먼지 (PM2.5): {airQuality.pm2_5} μg/m³</p>\r\n                    <p>상태: {airQuality.pm10 > 50 ? \"나쁨\" : \"좋음\"}</p>\r\n                </div>\r\n            ) : (\r\n                <p>미세먼지 정보가 없습니다.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AirQuality;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport \"./Pollution.css\";\r\n\r\nclass Pollution extends Component{\r\n    render(){\r\n        return(\r\n            <div id=\"pollution-info\" className='pollution-info'>\r\n                <div id=\"station-name\" className='station-name'>\r\n                    <span>측정시 : {this.props.sidoName}</span><br/>\r\n                    <span>측정장소 : {this.props.stationName}</span>\r\n                </div>\r\n                <div id=\"co-area\" className='co-area'>\r\n                    <span>일산화탄소 등급:{this.props.coGrade}</span><br/>\r\n                    <span>일산화탄소 농도:{this.props.coValue}</span>\r\n                </div>\r\n                <div id=\"no2-area\" className='no2-area'>\r\n                    <span>이산화질소 등급:{this.props.no2Grade}</span><br/>\r\n                    <span>이산화질소 농도:{this.props.no2Value}</span>\r\n                </div>\r\n                <div id=\"pm10-area\" className='pm10-area'>\r\n                    <span>미세먼지(10mm) 등급:{this.props.pm10Grade}</span><br/>\r\n                    <span>미세먼지(10mm) 농도:{this.props.pm10Value}</span>\r\n                </div>\r\n                <div id=\"pm25-area\" className='pm25-area'>\r\n                    <span>미세먼지(25mm) 등급:{this.props.pm25Grade}</span><br/>\r\n                    <span>미세먼지(25mm) 농도:{this.props.pm25Value}</span>\r\n                </div>\r\n                <div id=\"so2-area\" className='so2-area'>\r\n                    <span>이산화황 등급:{this.props.so2Grade}</span><br/>\r\n                    <span>이산화황 농도:{this.props.so2Value}</span>\r\n                </div>\r\n                <div id=\"o3-area\" className='o3-area'>\r\n                    <span>오존 등급:{this.props.o3Grade}</span><br/>\r\n                    <span>오존 농도:{this.props.o3Value}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pollution;\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport AirQuality from './AirQuality';\r\nimport axios from 'axios';\r\nimport Pollution from './Pollution';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      pollutionDataList:[],\r\n      city:'',\r\n    }\r\n  }\r\n\r\n  getData = async()=>{\r\n\r\n    const serviceKey = 'scbPesyEHWA4akZys78sDQjG6AEq%2FQGj6l3VkN70FwRpmyY2VJM4IVgAsf%2BI2oq%2BJFoG10Tcr4LiFVbc5Kq2ew%3D%3D'\r\n    let sidoName=this.state.city\r\n\r\n    if(sidoName ===''){\r\n      alert(\"도시를 입력하세요!\")\r\n      return\r\n    }\r\n\r\n    await axios({\r\n      method: 'get',\r\n      url: `https://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=${serviceKey}&returnType=json&numOfRows=1&pageNo=1&sidoName=${sidoName}&ver=1.0`,\r\n      dataType: 'json',\r\n    })\r\n    .then(response => \r\n        { \r\n          console.log(response);\r\n          console.log(response.data.response.body.items);\r\n          this.setState({\r\n            pollutionDataList:response.data.response.body.items\r\n          })\r\n        }\r\n    );\r\n  }\r\n\r\n  handleChange=(e)=>{\r\n    this.setState({\r\n      [e.target.name]:e.target.value\r\n    })\r\n  }\r\n\r\n  render(){\r\n\r\n    const result=this.state.pollutionDataList.map(\r\n      (data)=>(<Pollution \r\n        sidoName={data.sidoName}\r\n        stationName={data.stationName} \r\n        coGrade={data.coGrade} coValue={data.coValue}\r\n        no2Grade={data.no2Grade} no2Value={data.no2Value}\r\n        pm10Grade={data.pm10Grade} pm10Value={data.pm10Value}\r\n        pm25Grade={data.pm25Grade} pm25Value={data.pm25Value}\r\n        so2Grade={data.so2Grade} so2Value={data.so2Value}\r\n        o3Grade={data.o3Grade} o3Value={data.o3Value}></Pollution>)\r\n    )\r\n\r\n    return (\r\n    <div id=\"app\" className='pollution-info'>\r\n        <input type=\"text\" placeholder=\"도시를 입력하세요\" onChange={this.handleChange} name=\"city\"/>\r\n        <button onClick={this.getData}>검색</button>\r\n        {result}\r\n    <div>\r\n      <AirQuality />\r\n    </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'; // BrowserRouter 임포트\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}> {/* BrowserRouter로 감싸기 */}\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// 성능 측정을 위한 reportWebVitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}