{"version":3,"sources":["components/AirQuality/AirQuality.js","components/Pollution/Pollution.js","App.js","components/AirQuality/reportWebVitals.js","index.js"],"names":["AirQuality","useState","airQuality","setAirQuality","locationName","setLocationName","error","setError","loading","setLoading","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","fetchAirQualityData","fetchLocationName","a","apiUrl","axios","get","response","data","list","length","airData","components","name","getAirQualityStatus","value","className","pm10","pm2_5","status","Pollution","props","getData","serviceKey","sidoName","state","city","alert","body","items","setState","pollutionDataList","handleChange","e","target","result","this","map","stationName","coGrade","coValue","no2Grade","no2Value","pm10Grade","pm10Value","pm25Grade","pm25Value","so2Grade","so2Value","o3Grade","o3Value","id","type","placeholder","onChange","onClick","Component","PollutionDetail","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.61c25175.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AirQuality.css';\r\n\r\nconst AirQuality = () => {\r\n    const [airQuality, setAirQuality] = useState(null);\r\n    const [locationName, setLocationName] = useState(\"\"); // 지역 이름 상태 추가\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // 위치 정보 가져오기\r\n        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n\r\n        function successCallback(position) {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            console.log(\"위치 정보:\", { latitude, longitude }); // 위치 정보 콘솔에 출력\r\n            fetchAirQualityData(latitude, longitude);\r\n            fetchLocationName(latitude, longitude); // 지역 이름 가져오기\r\n        }\r\n\r\n        function errorCallback() {\r\n            setError(\"위치 정보를 가져오는 데 실패했습니다.\");\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const fetchAirQualityData = async (latitude, longitude) => {\r\n        const apiKey = '3598c54da4d7cf34e04ec92640a797a9'; // 대기질 API 키\r\n        const apiUrl = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${latitude}&lon=${longitude}&appid=${apiKey}`;\r\n\r\n        try {\r\n            const response = await axios.get(apiUrl);\r\n            console.log(\"대기질 API 응답:\", response.data); // 응답 로그 출력\r\n            if (response.data.list && response.data.list.length > 0) {\r\n                const airData = response.data.list[0];\r\n                setAirQuality(airData.components); // components에서 미세먼지 정보 가져오기\r\n            } else {\r\n                setError(\"미세먼지 데이터를 가져오는 데 실패했습니다.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"대기질 API 요청 오류:\", err);\r\n            setError(\"미세먼지 데이터를 가져오는 데 실패했습니다.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchLocationName = async (latitude, longitude) => {\r\n        const apiKey = '3598c54da4d7cf34e04ec92640a797a9'; // 지오코딩 API 키\r\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=kr`; // 한국어 요청\r\n\r\n        try {\r\n            const response = await axios.get(apiUrl);\r\n            if (response.data) {\r\n                let name = response.data.name; // 지역 이름 설정\r\n                const locationMapping = {\r\n                    \"Seoul\": \"서울특별시\",\r\n                    \"Busan\": \"부산광역시\",\r\n                    \"Incheon\": \"인천광역시\",\r\n                    \"Daegu\": \"대구광역시\",\r\n                    \"Daejeon\": \"대전광역시\",\r\n                    \"Gwangju\": \"광주광역시\",\r\n                    \"Ulsan\": \"울산광역시\",\r\n                    \"Sejong\": \"세종특별자치시\",\r\n                    \"Gyeonggi-do\": \"경기도\",\r\n                    \"Gangwon-do\": \"강원도\",\r\n                    \"Chungcheongbuk-do\": \"충청북도\",\r\n                    \"Chungcheongnam-do\": \"충청남도\",\r\n                    \"Jeollabuk-do\": \"전라북도\",\r\n                    \"Jeollanam-do\": \"전라남도\",\r\n                    \"Gyeongsangbuk-do\": \"경상북도\",\r\n                    \"Gyeongsangnam-do\": \"경상남도\",\r\n                    \"Jeju-do\": \"제주도\",\r\n                    \"Miryang\": \"밀양\"\r\n                };\r\n                setLocationName(locationMapping[name] || name); // 매핑된 이름 또는 기본 이름 설정\r\n            }\r\n        } catch (err) {\r\n            console.error(\"지역 이름 요청 오류:\", err);\r\n        }\r\n    };\r\n\r\n    const getStatus = (pm10, pm2_5) => {\r\n        const pm10Status = getAirQualityStatus(pm10);\r\n        const pm2_5Status = getAirQualityStatus(pm2_5);\r\n        return {\r\n            pm10: pm10Status,\r\n            pm2_5: pm2_5Status\r\n        };\r\n    };\r\n\r\n    const getAirQualityStatus = (value) => {\r\n        if (value <= 15) return \"좋음\";\r\n        if (value <= 35) return \"보통\";\r\n        if (value <= 75) return \"나쁨\";\r\n        return \"매우 나쁨\";\r\n    };\r\n\r\n    if (loading) return <div className=\"loading\">로딩 중...</div>;\r\n    if (error) return <div className=\"error\">{error}</div>;\r\n\r\n    const status = airQuality ? getStatus(airQuality.pm10, airQuality.pm2_5) : {};\r\n\r\n    return (\r\n        <div className=\"AirQuality-info\">\r\n            <h1 className=\"Dust\">미세먼지 정보</h1>\r\n            {locationName && <h2>현재 지역: {locationName}</h2>}\r\n            {airQuality ? (\r\n                <div className=\"flex\">\r\n                    <div className=\"air-quality-item\">\r\n                        <p>미세먼지 (PM10): {airQuality.pm10} μg/m³</p>\r\n                        <p className='status'>상태: {status.pm10}</p>\r\n                    </div>\r\n                    <div className=\"air-quality-item\">\r\n                        <p>초미세먼지 (PM2.5): {airQuality.pm2_5} μg/m³</p>\r\n                        <p className='status'>상태: {status.pm2_5}</p>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <p>미세먼지 정보가 없습니다.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AirQuality;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Pollution.css';\r\n\r\nclass Pollution extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pollutionDataList: [],\r\n            city: '',\r\n        };\r\n    }\r\n\r\n    getData = async () => {\r\n        const serviceKey = 'scbPesyEHWA4akZys78sDQjG6AEq%2FQGj6l3VkN70FwRpmyY2VJM4IVgAsf%2BI2oq%2BJFoG10Tcr4LiFVbc5Kq2ew%3D%3D';\r\n        let sidoName = this.state.city;\r\n\r\n        if (sidoName === '') {\r\n            alert(\"도시를 입력하세요!\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`https://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=${serviceKey}&returnType=json&numOfRows=1&pageNo=1&sidoName=${sidoName}&ver=1.0`);\r\n            console.log(response);\r\n            console.log(response.data.response.body.items);\r\n            this.setState({\r\n                pollutionDataList: response.data.response.body.items,\r\n            });\r\n        } catch (error) {\r\n            console.error(\"데이터 가져오기 오류:\", error);\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const result = this.state.pollutionDataList.map((data) => (\r\n            <PollutionDetail \r\n                key={data.stationName} // 고유 키 추가\r\n                sidoName={data.sidoName}\r\n                stationName={data.stationName}\r\n                coGrade={data.coGrade} \r\n                coValue={data.coValue}\r\n                no2Grade={data.no2Grade} \r\n                no2Value={data.no2Value}\r\n                pm10Grade={data.pm10Grade} \r\n                pm10Value={data.pm10Value}\r\n                pm25Grade={data.pm25Grade} \r\n                pm25Value={data.pm25Value}\r\n                so2Grade={data.so2Grade} \r\n                so2Value={data.so2Value}\r\n                o3Grade={data.o3Grade} \r\n                o3Value={data.o3Value}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div id=\"app\" className='pollution-info'>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"도시를 입력하세요\" \r\n                    onChange={this.handleChange} \r\n                    name=\"city\" \r\n                />\r\n                <button onClick={this.getData}>검색</button>\r\n                {result}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PollutionDetail = ({ sidoName, stationName, coGrade, coValue, no2Grade, no2Value, pm10Grade, pm10Value, pm25Grade, pm25Value, so2Grade, so2Value, o3Grade, o3Value }) => {\r\n    return (\r\n        <div id=\"pollution-info\" className='pollution-info'>\r\n            <div id=\"station-name\" className='station-name'>\r\n                <span>측정시 : {sidoName}</span><br />\r\n                <span>측정장소 : {stationName}</span>\r\n            </div>\r\n            <div id=\"co-area\" className='co-area'>\r\n                <span>일산화탄소 등급: {coGrade}</span><br />\r\n                <span>일산화탄소 농도: {coValue}</span>\r\n            </div>\r\n            <div id=\"no2-area\" className='no2-area'>\r\n                <span>이산화질소 등급: {no2Grade}</span><br />\r\n                <span>이산화질소 농도: {no2Value}</span>\r\n            </div>\r\n            <div id=\"pm10-area\" className='pm10-area'>\r\n                <span>미세먼지(10mm) 등급: {pm10Grade}</span><br />\r\n                <span>미세먼지(10mm) 농도: {pm10Value}</span>\r\n            </div>\r\n            <div id=\"pm25-area\" className='pm25-area'>\r\n                <span>미세먼지(25mm) 등급: {pm25Grade}</span><br />\r\n                <span>미세먼지(25mm) 농도: {pm25Value}</span>\r\n            </div>\r\n            <div id=\"so2-area\" className='so2-area'>\r\n                <span>이산화황 등급: {so2Grade}</span><br />\r\n                <span>이산화황 농도: {so2Value}</span>\r\n            </div>\r\n            <div id=\"o3-area\" className='o3-area'>\r\n                <span>오존 등급: {o3Grade}</span><br />\r\n                <span>오존 농도: {o3Value}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pollution;\r\n\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport AirQuality from './components/AirQuality/AirQuality';\r\nimport Pollution from './components/Pollution/Pollution';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n    return (\r\n    <div>\r\n      <AirQuality />\r\n      <Pollution />\r\n    </div>\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'; // BrowserRouter 임포트\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './components/AirQuality/reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}> {/* BrowserRouter로 감싸기 */}\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// 성능 측정을 위한 reportWebVitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}